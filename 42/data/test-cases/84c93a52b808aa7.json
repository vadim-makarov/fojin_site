{"uid":"84c93a52b808aa7","name":"test_case_page[chrome-6-locator5]","fullName":"ui_tests.test_cases_page.TestCasesPage#test_case_page","historyId":"28c79320443e03def068ec45989e4be6","time":{"start":1670769987594,"stop":1670769991190,"duration":3596},"description":"\n        test checks availability of each case page(doesn't check content!)\n        ","descriptionHtml":"<pre><code>    test checks availability of each case page(doesn't check content!)\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (400, 5183)\n  (Session info: headless chrome=108.0.5359.94)\nStacktrace:\n#0 0x55de12d2d2a3 <unknown>\n#1 0x55de12aebf77 <unknown>\n#2 0x55de12b2f0a9 <unknown>\n#3 0x55de12b2d18d <unknown>\n#4 0x55de12b2ad88 <unknown>\n#5 0x55de12b29f2d <unknown>\n#6 0x55de12b1ddc5 <unknown>\n#7 0x55de12b48b32 <unknown>\n#8 0x55de12b1d61f <unknown>\n#9 0x55de12b48cfe <unknown>\n#10 0x55de12b6047c <unknown>\n#11 0x55de12b48903 <unknown>\n#12 0x55de12b1bece <unknown>\n#13 0x55de12b1cfde <unknown>\n#14 0x55de12d7d63e <unknown>\n#15 0x55de12d80b79 <unknown>\n#16 0x55de12d6389e <unknown>\n#17 0x55de12d81a83 <unknown>\n#18 0x55de12d56505 <unknown>\n#19 0x55de12da2ca8 <unknown>\n#20 0x55de12da2e36 <unknown>\n#21 0x55de12dbe333 <unknown>\n#22 0x7ff353ac0b43 <unknown>","statusTrace":"self = <ui_tests.test_cases_page.TestCasesPage object at 0x7f6c6b59add0>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e97444e6bffccb5a12f2166a0d86e647\")>\ncase = '6'\nlocator = ('css selector', '.case-container-6 > div:nth-child(1) > div:nth-child(1)')\n\n    @severity(severity_level.CRITICAL)\n    @allure.feature('User can see all the cases')\n    @pytest.mark.parametrize('case, locator', list(zip(CasesData.cases_list, CasesData.locators)))\n    def test_case_page(self, browser, case: str, locator: tuple):\n        \"\"\"\n        test checks availability of each case page(doesn't check content!)\n        \"\"\"\n        page = CasesPage(browser, self.url)\n        page.open()\n        page.expl_wait_for_page_download('cases')\n>       page.scroll_to_and_click_element(locator)\n\nui_tests/test_cases_page.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nui_tests/pages/main_page.py:38: in scroll_to_and_click_element\n    element.click()\n/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:410: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6c6b569b90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55de12da2e36 \\\\u003Cunknown>\\\\n#21 0x55de12dbe333 \\\\u003Cunknown>\\\\n#22 0x7ff353ac0b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (400, 5183)\nE         (Session info: headless chrome=108.0.5359.94)\nE       Stacktrace:\nE       #0 0x55de12d2d2a3 <unknown>\nE       #1 0x55de12aebf77 <unknown>\nE       #2 0x55de12b2f0a9 <unknown>\nE       #3 0x55de12b2d18d <unknown>\nE       #4 0x55de12b2ad88 <unknown>\nE       #5 0x55de12b29f2d <unknown>\nE       #6 0x55de12b1ddc5 <unknown>\nE       #7 0x55de12b48b32 <unknown>\nE       #8 0x55de12b1d61f <unknown>\nE       #9 0x55de12b48cfe <unknown>\nE       #10 0x55de12b6047c <unknown>\nE       #11 0x55de12b48903 <unknown>\nE       #12 0x55de12b1bece <unknown>\nE       #13 0x55de12b1cfde <unknown>\nE       #14 0x55de12d7d63e <unknown>\nE       #15 0x55de12d80b79 <unknown>\nE       #16 0x55de12d6389e <unknown>\nE       #17 0x55de12d81a83 <unknown>\nE       #18 0x55de12d56505 <unknown>\nE       #19 0x55de12da2ca8 <unknown>\nE       #20 0x55de12da2e36 <unknown>\nE       #21 0x55de12dbe333 <unknown>\nE       #22 0x7ff353ac0b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:249: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1670769986601,"stop":1670769987593,"duration":992},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"\n        test checks availability of each case page(doesn't check content!)\n        ","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (400, 5183)\n  (Session info: headless chrome=108.0.5359.94)\nStacktrace:\n#0 0x55de12d2d2a3 <unknown>\n#1 0x55de12aebf77 <unknown>\n#2 0x55de12b2f0a9 <unknown>\n#3 0x55de12b2d18d <unknown>\n#4 0x55de12b2ad88 <unknown>\n#5 0x55de12b29f2d <unknown>\n#6 0x55de12b1ddc5 <unknown>\n#7 0x55de12b48b32 <unknown>\n#8 0x55de12b1d61f <unknown>\n#9 0x55de12b48cfe <unknown>\n#10 0x55de12b6047c <unknown>\n#11 0x55de12b48903 <unknown>\n#12 0x55de12b1bece <unknown>\n#13 0x55de12b1cfde <unknown>\n#14 0x55de12d7d63e <unknown>\n#15 0x55de12d80b79 <unknown>\n#16 0x55de12d6389e <unknown>\n#17 0x55de12d81a83 <unknown>\n#18 0x55de12d56505 <unknown>\n#19 0x55de12da2ca8 <unknown>\n#20 0x55de12da2e36 <unknown>\n#21 0x55de12dbe333 <unknown>\n#22 0x7ff353ac0b43 <unknown>","statusTrace":"self = <ui_tests.test_cases_page.TestCasesPage object at 0x7f6c6b59add0>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e97444e6bffccb5a12f2166a0d86e647\")>\ncase = '6'\nlocator = ('css selector', '.case-container-6 > div:nth-child(1) > div:nth-child(1)')\n\n    @severity(severity_level.CRITICAL)\n    @allure.feature('User can see all the cases')\n    @pytest.mark.parametrize('case, locator', list(zip(CasesData.cases_list, CasesData.locators)))\n    def test_case_page(self, browser, case: str, locator: tuple):\n        \"\"\"\n        test checks availability of each case page(doesn't check content!)\n        \"\"\"\n        page = CasesPage(browser, self.url)\n        page.open()\n        page.expl_wait_for_page_download('cases')\n>       page.scroll_to_and_click_element(locator)\n\nui_tests/test_cases_page.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nui_tests/pages/main_page.py:38: in scroll_to_and_click_element\n    element.click()\n/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:410: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f6c6b569b90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55de12da2e36 \\\\u003Cunknown>\\\\n#21 0x55de12dbe333 \\\\u003Cunknown>\\\\n#22 0x7ff353ac0b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (400, 5183)\nE         (Session info: headless chrome=108.0.5359.94)\nE       Stacktrace:\nE       #0 0x55de12d2d2a3 <unknown>\nE       #1 0x55de12aebf77 <unknown>\nE       #2 0x55de12b2f0a9 <unknown>\nE       #3 0x55de12b2d18d <unknown>\nE       #4 0x55de12b2ad88 <unknown>\nE       #5 0x55de12b29f2d <unknown>\nE       #6 0x55de12b1ddc5 <unknown>\nE       #7 0x55de12b48b32 <unknown>\nE       #8 0x55de12b1d61f <unknown>\nE       #9 0x55de12b48cfe <unknown>\nE       #10 0x55de12b6047c <unknown>\nE       #11 0x55de12b48903 <unknown>\nE       #12 0x55de12b1bece <unknown>\nE       #13 0x55de12b1cfde <unknown>\nE       #14 0x55de12d7d63e <unknown>\nE       #15 0x55de12d80b79 <unknown>\nE       #16 0x55de12d6389e <unknown>\nE       #17 0x55de12d81a83 <unknown>\nE       #18 0x55de12d56505 <unknown>\nE       #19 0x55de12da2ca8 <unknown>\nE       #20 0x55de12da2e36 <unknown>\nE       #21 0x55de12dbe333 <unknown>\nE       #22 0x7ff353ac0b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:249: ElementClickInterceptedException","steps":[],"attachments":[{"uid":"394f1472112bf5b7","name":"stderr","source":"394f1472112bf5b7.txt","type":"text/plain","size":159}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"browser::0","time":{"start":1670769991231,"stop":1670769991289,"duration":58},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"severity","value":"critical"},{"name":"feature","value":"User can see all the cases"},{"name":"parentSuite","value":"ui_tests"},{"name":"suite","value":"test_cases_page"},{"name":"subSuite","value":"TestCasesPage"},{"name":"host","value":"fv-az367-28"},{"name":"thread","value":"2982-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"ui_tests.test_cases_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser","value":"'chrome'"},{"name":"case","value":"'6'"},{"name":"locator","value":"('css selector', '.case-container-6 > div:nth-child(1) > div:nth-child(1)')"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[{"uid":"4c3dcfa56a1df05e","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (400, 5188)\n  (Session info: headless chrome=108.0.5359.94)\nStacktrace:\n#0 0x5573f16342a3 <unknown>\n#1 0x5573f13f2f77 <unknown>\n#2 0x5573f14360a9 <unknown>\n#3 0x5573f143418d <unknown>\n#4 0x5573f1431d88 <unknown>\n#5 0x5573f1430f2d <unknown>\n#6 0x5573f1424dc5 <unknown>\n#7 0x5573f144fb32 <unknown>\n#8 0x5573f142461f <unknown>\n#9 0x5573f144fcfe <unknown>\n#10 0x5573f146747c <unknown>\n#11 0x5573f144f903 <unknown>\n#12 0x5573f1422ece <unknown>\n#13 0x5573f1423fde <unknown>\n#14 0x5573f168463e <unknown>\n#15 0x5573f1687b79 <unknown>\n#16 0x5573f166a89e <unknown>\n#17 0x5573f1688a83 <unknown>\n#18 0x5573f165d505 <unknown>\n#19 0x5573f16a9ca8 <unknown>\n#20 0x5573f16a9e36 <unknown>\n#21 0x5573f16c5333 <unknown>\n#22 0x7efed5d2bb43 <unknown>","time":{"start":1670769982903,"stop":1670769986500,"duration":3597}},{"uid":"cd3542fc6efb9222","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (400, 5166)\n  (Session info: headless chrome=108.0.5359.94)\nStacktrace:\n#0 0x56070f8682a3 <unknown>\n#1 0x56070f626f77 <unknown>\n#2 0x56070f66a0a9 <unknown>\n#3 0x56070f66818d <unknown>\n#4 0x56070f665d88 <unknown>\n#5 0x56070f664f2d <unknown>\n#6 0x56070f658dc5 <unknown>\n#7 0x56070f683b32 <unknown>\n#8 0x56070f65861f <unknown>\n#9 0x56070f683cfe <unknown>\n#10 0x56070f69b47c <unknown>\n#11 0x56070f683903 <unknown>\n#12 0x56070f656ece <unknown>\n#13 0x56070f657fde <unknown>\n#14 0x56070f8b863e <unknown>\n#15 0x56070f8bbb79 <unknown>\n#16 0x56070f89e89e <unknown>\n#17 0x56070f8bca83 <unknown>\n#18 0x56070f891505 <unknown>\n#19 0x56070f8ddca8 <unknown>\n#20 0x56070f8dde36 <unknown>\n#21 0x56070f8f9333 <unknown>\n#22 0x7f1235105b43 <unknown>","time":{"start":1670769977555,"stop":1670769981763,"duration":4208}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":3,"passed":0,"unknown":0,"total":5},"items":[{"uid":"77035d10e2e50f35","reportUrl":"https://vadim-makarov.github.io/fojin_site/41//#testresult/77035d10e2e50f35","status":"broken","statusDetails":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (400, 5188)\n  (Session info: headless chrome=108.0.5359.94)\nStacktrace:\n#0 0x560d5d25c2a3 <unknown>\n#1 0x560d5d01af77 <unknown>\n#2 0x560d5d05e0a9 <unknown>\n#3 0x560d5d05c18d <unknown>\n#4 0x560d5d059d88 <unknown>\n#5 0x560d5d058f2d <unknown>\n#6 0x560d5d04cdc5 <unknown>\n#7 0x560d5d077b32 <unknown>\n#8 0x560d5d04c61f <unknown>\n#9 0x560d5d077cfe <unknown>\n#10 0x560d5d08f47c <unknown>\n#11 0x560d5d077903 <unknown>\n#12 0x560d5d04aece <unknown>\n#13 0x560d5d04bfde <unknown>\n#14 0x560d5d2ac63e <unknown>\n#15 0x560d5d2afb79 <unknown>\n#16 0x560d5d29289e <unknown>\n#17 0x560d5d2b0a83 <unknown>\n#18 0x560d5d285505 <unknown>\n#19 0x560d5d2d1ca8 <unknown>\n#20 0x560d5d2d1e36 <unknown>\n#21 0x560d5d2ed333 <unknown>\n#22 0x7f3511538b43 <unknown>","time":{"start":1670706593921,"stop":1670706596338,"duration":2417}},{"uid":"fcf412bf584e32ba","reportUrl":"https://vadim-makarov.github.io/fojin_site/40//#testresult/fcf412bf584e32ba","status":"skipped","statusDetails":"XFAIL the test fails in a window mode\n\nselenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (400, 5188)\n  (Session info: headless chrome=108.0.5359.94)\nStacktrace:\n#0 0x55a6bf4142a3 <unknown>\n#1 0x55a6bf1d2f77 <unknown>\n#2 0x55a6bf2160a9 <unknown>\n#3 0x55a6bf21418d <unknown>\n#4 0x55a6bf211d88 <unknown>\n#5 0x55a6bf210f2d <unknown>\n#6 0x55a6bf204dc5 <unknown>\n#7 0x55a6bf22fb32 <unknown>\n#8 0x55a6bf20461f <unknown>\n#9 0x55a6bf22fcfe <unknown>\n#10 0x55a6bf24747c <unknown>\n#11 0x55a6bf22f903 <unknown>\n#12 0x55a6bf202ece <unknown>\n#13 0x55a6bf203fde <unknown>\n#14 0x55a6bf46463e <unknown>\n#15 0x55a6bf467b79 <unknown>\n#16 0x55a6bf44a89e <unknown>\n#17 0x55a6bf468a83 <unknown>\n#18 0x55a6bf43d505 <unknown>\n#19 0x55a6bf489ca8 <unknown>\n#20 0x55a6bf489e36 <unknown>\n#21 0x55a6bf4a5333 <unknown>\n#22 0x7fa59a6e7b43 <unknown>","time":{"start":1670703926002,"stop":1670703929202,"duration":3200}},{"uid":"f5b97b755d80e0f0","reportUrl":"https://vadim-makarov.github.io/fojin_site/39//#testresult/f5b97b755d80e0f0","status":"skipped","statusDetails":"XFAIL the test fails in a window mode\n\nAssertionError: https://test_user:hellofojin@dev.fojin.tech/ru/cases","time":{"start":1670701886542,"stop":1670701894519,"duration":7977}},{"uid":"b7cb2b559d0773fb","reportUrl":"https://vadim-makarov.github.io/fojin_site/37//#testresult/b7cb2b559d0773fb","status":"skipped","statusDetails":"XFAIL the test fails in a window mode\n\nAssertionError: https://test_user:hellofojin@dev.fojin.tech/ru/cases","time":{"start":1670701738105,"stop":1670701745958,"duration":7853}}]},"tags":[]},"source":"84c93a52b808aa7.json","parameterValues":["'chrome'","'6'","('css selector', '.case-container-6 > div:nth-child(1) > div:nth-child(1)')"]}